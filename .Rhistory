test = subset(Default, split == F)
# train and test sets with balance and income only
train_bi = train[, c('default', 'balance', 'income')]
test_bi = test[, c('default', 'balance', 'income')]
svm_bi2 = svm(default ~ .,
data = train_bi,
kernel = 'sigmoid',
gamma = 1,
cost = 1)
summary(svm_bi2)
# Tuning of SVM Kernel
set.seed(111)
tune_out_bi2 = tune(svm,
default ~ .,
data = train_bi,
kernel = 'sigmoid',
ranges = list(cost = c(0.1, 1, 10, 100, 1000),
gamma = c(0.5, 1, 2, 3, 4)))
summary(tune_out_bi2)
bestmod_bi2 = tune_out_bi2$best.model
summary(bestmod_bi2)
# CM on Training Set
newpred_bi_train2 = predict(bestmod_bi2, train_bi)
confusionMatrix(table(prediction = newpred_bi_train2,
actual = train_bi$default))
# CM on Training Set
newpred_bi_train2 = predict(bestmod_bi2, train_bi)
confusionMatrix(table(prediction = newpred_bi_train2,
actual = train_bi$default))
# CM on Test Set
newpred_bi_test2 = predict(bestmod_bi2, test_bi)
confusionMatrix(table(prediction = newpred_bi_test2,
actual = test_bi$default))
# train and test sets with student and balance only
train_bi = train[, c('default', 'balance', 'student')]
test_bi = test[, c('default', 'balance', 'student')]
# train and test sets with balance and income only
train_bi = train[, c('default', 'balance', 'income')]
test_bi = test[, c('default', 'balance', 'income')]
# train and test sets with student and balance only
train_bs = train[, c('default', 'balance', 'student')]
test_bs = test[, c('default', 'balance', 'student')]
View(train_bs)
svm_bs1 = svm(default ~ .,
data = train_bs,
kernel = 'radial',
gamma = 1,
cost = 1)
summary(svm_bs1)
# Tuning of SVM Kernel
set.seed(111)
tune_out_bs1 = tune(svm,
default ~ .,
data = train_bs,
kernel = 'radial',
ranges = list(cost = c(0.1, 1, 10, 100, 1000),
gamma = c(0.5, 1, 2, 3, 4)))
summary(tune_out_bs1)
bestmod_bs1 = tune_out_bs1$best.model
summary(bestmod_bs1)
# CM on Training Set
newpred_bs_train1 = predict(bestmod_bs1, train_bs)
confusionMatrix(table(prediction = newpred_bs_train1,
actual = train_bs$default))
# CM on Test Set
newpred_bs_test1 = predict(bestmod_bs1, test_bs)
confusionMatrix(table(prediction = newpred_bs_test1,
actual = test_bs$default))
svm_bs2 = svm(default ~ .,
data = train_bs,
kernel = 'sigmoid',
gamma = 1,
cost = 1)
summary(svm_bs2)
# Tuning of SVM Kernel
set.seed(111)
tune_out_bs2 = tune(svm,
default ~ .,
data = train_bs,
kernel = 'sigmoid',
ranges = list(cost = c(0.1, 1, 10, 100, 1000),
gamma = c(0.5, 1, 2, 3, 4)))
summary(tune_out_bs2)
bestmod_bs2 = tune_out_bs2$best.model
summary(bestmod_bs2)
# CM on Training Set
newpred_bs_train2 = predict(bestmod_bs2, train_bs)
confusionMatrix(table(prediction = newpred_bs_train2,
actual = train_bs$default))
# CM on Test Set
newpred_bs_test2 = predict(bestmod_bs2, test_bs)
confusionMatrix(table(prediction = newpred_bs_test2,
actual = test_bs$default))
library(ISLR)
library(e1071)
library(caret)
library(caTools)
data(Default)
summary(Default)
# Data import
diabetes = read.csv('./datasets/Diabetes.csv', header = F)
colnames(diabetes) = c('no.of.times.preg', 'plasma.glucose.conc', 'diastolic.pressure',
'triceps.skin.fold.thick', 'serum.insulin', 'bmi', 'diab.pedigree.func',
'age', 'positive.test')
# Factorizing class variable
diabetes$positive.test = as.factor(as.character(diabetes$positive.test))
summary(diabetes)
# Train-test split
library(caTools)
set.seed(111)
diabetes$split = sample.split(diabetes$positive.test, SplitRatio = 0.7)
diabetes_train = subset(diabetes, split == T)
diabetes_test = subset(diabetes, split == F)
# Excluding split columns
diabetes_train = diabetes_train[-10]
diabetes_test = diabetes_test[-10]
# Writing CSV for train and test
write.table(diabetes_train, sep = ',', file = './datasets/Diabetes_train.csv', row.names = F)
write.table(diabetes_test, sep = ',', file = './datasets/Diabetes_test.csv', row.names = F)
# Loading neural net packages
# install.packages(c('nnet', 'neuralnet', 'pnn', 'RSNNS', 'NeuralNetTools'))
library(nnet)
library(neuralnet)
library(grnn)
library(RSNNS)
library(NeuralNetTools)
# Building the neural net model
diabetes_nnet = nnet(positive.test ~ ., data = diabetes_train,
size = 8, maxit = 10000, decay = 0.0001)
summary(diabetes_nnet)
# Prediction and confusion matrix
pred = predict(diabetes_nnet, newdata = diabetes_test, type = 'class')
cm = table(true = diabetes_test$positive.test, predicted = pred)
library(caret)
cm1 = confusionMatrix(cm)
cm1
plotnet(diabetes_nnet)
diabetes_train$positive.test = as.numeric(as.character(diabetes_train$positive.test))
diabetes_test$positive.test = as.numeric(as.character(diabetes_test$positive.test))
summary(diabetes_train)
summary(diabetes_test)
diabetes_gnet = learn(set = diabetes_train, variable.column = length(diabetes_train))
diabetes_gnet = smooth(diabetes_gnet, sigma = 0.5)
diabetes_test$predict = -1
diabetes_testsub = diabetes_test[, 1:8]
vec = as.matrix(diabetes_testsub[1, ])
res = guess(diabetes_gnet, vec)
for(i in 1:nrow(diabetes_testsub)) {
vec = as.matrix(diabetes_testsub[i, ])
res = guess(diabetes_gnet, vec)
if(anyNA(res)) {
cat("Entry ",i," Generated NaN result!\n")
} else{
diabetes_test$predict[i] = res
}
}
View(diabetes_test)
View(diabetes_testsub)
diabetes_test$predictclass = round(diabetes_test$predict)
View(diabetes_test)
vec = as.matrix(diabetes_testsub[7, ])
res = guess(diabetes_gnet, vec)
vec = as.matrix(as.numeric(diabetes_testsub[7, ]))
res = guess(diabetes_gnet, vec)
vec
vec = as.matrix(diabetes_testsub[7, ])
vec
typeof(vec)
typeof(vec[1])
typeof(vec[2])
typeof(vec[3])
typeof(vec[4])
typeof(vec[5])
typeof(vec[6])
typeof(vec[7])
typeof(vec[8])
typeof(vec[9])
typeof(vec[10])
res = guess(diabetes_gnet, vec)
vec = as.matrix(diabetes_testsub[6, ])
res = guess(diabetes_gnet, vec)
vec = as.matrix(diabetes_testsub[5, ])
res = guess(diabetes_gnet, vec)
vec = as.matrix(diabetes_testsub[4, ])
res = guess(diabetes_gnet, vec)
vec = as.matrix(diabetes_testsub[7, ])
res = guess(diabetes_gnet, vec)
vec = as.numeric(diabetes_testsub[7, ])
vec
res = guess(diabetes_gnet, vec)
vec = as.matrix(diabetes_testsub[7, ])
res = guess(diabetes_gnet, vec)
library(ISLR)
library(e1071)
library(caret)
library(caTools)
data(Default)
summary(Default)
library(ISLR)
library(e1071)
library(caret)
library(caTools)
data(Default)
summary(Default)
set.seed(111)
split = sample.split(Default$default, SplitRatio = 0.8)
train = subset(Default, split == T)
test = subset(Default, split == F)
# train and test sets with balance and income only
train_bi = train[, c('default', 'balance', 'income')]
test_bi = test[, c('default', 'balance', 'income')]
# train and test sets with student and balance only
train_bs = train[, c('default', 'balance', 'student')]
test_bs = test[, c('default', 'balance', 'student')]
View(train)
set.seed(111)
split = sample.split(Default$default, SplitRatio = 0.8)
train = subset(Default, split == T)
test = subset(Default, split == F)
# train and test sets with balance and income only
train_bi = train[, c('default', 'balance', 'income')]
test_bi = test[, c('default', 'balance', 'income')]
# train and test sets with student and balance only
train_bs = train[, c('default', 'balance', 'student')]
test_bs = test[, c('default', 'balance', 'student')]
# train and test sets with student and balance only
train_is = train[, c('default', 'income', 'student')]
test_is = test[, c('default', 'income', 'student')]
svm_bi1 = svm(default ~ .,
data = train_bi,
kernel = 'radial',
gamma = 1,
cost = 1)
summary(svm_bi1)
set.seed(111)
tune_out_bi1 = tune(svm,
default ~ .,
data = train_bi,
kernel = 'radial',
ranges = list(cost = c(0.1, 1, 10, 100, 1000),
gamma = c(0.5, 1, 2, 3, 4)),
tunecontrol = tune.control(sampling = 'cross',
cross = 5))
summary(tune_out_bi1)
bestmod_bi1 = tune_out_bi1$best.model
summary(bestmod_bi1)
# CM on Test Set
newpred_bi_test1 = predict(bestmod_bi1, test_bi)
confusionMatrix(table(prediction = newpred_bi_test1,
actual = test_bi$default))
svm_bi2 = svm(default ~ .,
data = train_bi,
kernel = 'sigmoid',
gamma = 1,
cost = 1)
summary(svm_bi2)
set.seed(111)
tune_out_bi2 = tune(svm,
default ~ .,
data = train_bi,
kernel = 'sigmoid',
ranges = list(cost = c(0.1, 1, 10, 100, 1000),
gamma = c(0.5, 1, 2, 3, 4)),
tunecontrol = tune.control(sampling = 'cross',
cross = 5))
summary(tune_out_bi2)
bestmod_bi2 = tune_out_bi2$best.model
summary(bestmod_bi2)
# CM on Test Set
newpred_bi_test2 = predict(bestmod_bi2, test_bi)
confusionMatrix(table(prediction = newpred_bi_test2,
actual = test_bi$default))
svm_bs1 = svm(default ~ .,
data = train_bs,
kernel = 'radial',
gamma = 1,
cost = 1)
summary(svm_bs1)
set.seed(111)
tune_out_bs1 = tune(svm,
default ~ .,
data = train_bs,
kernel = 'radial',
ranges = list(cost = c(0.1, 1, 10, 100, 1000),
gamma = c(0.5, 1, 2, 3, 4)),
tunecontrol = tune.control(sampling = 'cross',
cross = 5))
summary(tune_out_bs1)
bestmod_bs1 = tune_out_bs1$best.model
summary(bestmod_bs1)
# CM on Test Set
newpred_bs_test1 = predict(bestmod_bs1, test_bs)
confusionMatrix(table(prediction = newpred_bs_test1,
actual = test_bs$default))
svm_bs2 = svm(default ~ .,
data = train_bs,
kernel = 'sigmoid',
gamma = 1,
cost = 1)
summary(svm_bs2)
set.seed(111)
tune_out_bs2 = tune(svm,
default ~ .,
data = train_bs,
kernel = 'sigmoid',
ranges = list(cost = c(0.1, 1, 10, 100, 1000),
gamma = c(0.5, 1, 2, 3, 4)),
tunecontrol = tune.control(sampling = 'cross',
cross = 5))
summary(tune_out_bs2)
bestmod_bs2 = tune_out_bs2$best.model
summary(bestmod_bs2)
# CM on Test Set
newpred_bs_test2 = predict(bestmod_bs2, test_bs)
confusionMatrix(table(prediction = newpred_bs_test2,
actual = test_bs$default))
svm_is1 = svm(default ~ .,
data = train_is,
kernel = 'radial',
gamma = 1,
cost = 1)
summary(svm_is1)
set.seed(111)
tune_out_is1 = tune(svm,
default ~ .,
data = train_is,
kernel = 'radial',
ranges = list(cost = c(0.1, 1, 10, 100, 1000),
gamma = c(0.5, 1, 2, 3, 4)),
tunecontrol = tune.control(sampling = 'cross',
cross = 5))
summary(tune_out_is1)
bestmod_is1 = tune_out_is1$best.model
summary(bestmod_is1)
# CM on Test Set
newpred_is_test1 = predict(bestmod_is1, test_is)
confusionMatrix(table(prediction = newpred_is1_test1,
actual = test_is$default))
# CM on Test Set
newpred_is_test1 = predict(bestmod_is1, test_is)
confusionMatrix(table(prediction = newpred_is_test1,
actual = test_is$default))
svm_is2 = svm(default ~ .,
data = train_is,
kernel = 'sigmoid',
gamma = 1,
cost = 1)
summary(svm_is2)
set.seed(111)
tune_out_is2 = tune(svm,
default ~ .,
data = train_is,
kernel = 'sigmoid',
ranges = list(cost = c(0.1, 1, 10, 100, 1000),
gamma = c(0.5, 1, 2, 3, 4)),
tunecontrol = tune.control(sampling = 'cross',
cross = 5))
summary(tune_out_is2)
bestmod_is2 = tune_out_is2$best.model
summary(bestmod_is2)
# CM on Test Set
newpred_is_test2 = predict(bestmod_is2, test_is)
confusionMatrix(table(prediction = newpred_is_test2,
actual = test_is$default))
svm_all1 = svm(default ~ .,
data = train,
kernel = 'radial',
gamma = 1,
cost = 1)
summary(svm_all1)
set.seed(111)
tune_out_all1 = tune(svm,
default ~ .,
data = train,
kernel = 'radial',
ranges = list(cost = c(0.1, 1, 10, 100, 1000),
gamma = c(0.5, 1, 2, 3, 4)),
tunecontrol = tune.control(sampling = 'cross',
cross = 5))
summary(tune_out_all1)
bestmod_all1 = tune_out_all1$best.model
summary(bestmod_all1)
# CM on Test Set
newpred_all_test1 = predict(bestmod_all1, test)
confusionMatrix(table(prediction = newpred_all_test1,
actual = test$default))
svm_all2 = svm(default ~ .,
data = train,
kernel = 'sigmoid',
gamma = 1,
cost = 1)
summary(svm_all2)
set.seed(111)
tune_out_all2 = tune(svm,
default ~ .,
data = train,
kernel = 'sigmoid',
ranges = list(cost = c(0.1, 1, 10, 100, 1000),
gamma = c(0.5, 1, 2, 3, 4)),
tunecontrol = tune.control(sampling = 'cross',
cross = 5))
summary(tune_out_all2)
bestmod_all2 = tune_out_all2$best.model
summary(bestmod_all2)
# CM on Test Set
newpred_all_test2 = predict(bestmod_all2, test)
confusionMatrix(table(prediction = newpred_all_test2,
actual = test$default))
# Data import
diabetes = read.csv('./datasets/Diabetes.csv', header = F)
colnames(diabetes) = c('no.of.times.preg', 'plasma.glucose.conc', 'diastolic.pressure',
'triceps.skin.fold.thick', 'serum.insulin', 'bmi', 'diab.pedigree.func',
'age', 'positive.test')
# Factorizing class variable
diabetes$positive.test = as.factor(as.character(diabetes$positive.test))
summary(diabetes)
# Train-test split
library(caTools)
set.seed(111)
diabetes$split = sample.split(diabetes$positive.test, SplitRatio = 0.7)
diabetes_train = subset(diabetes, split == T)
diabetes_test = subset(diabetes, split == F)
# Excluding split columns
diabetes_train = diabetes_train[-10]
diabetes_test = diabetes_test[-10]
# Writing CSV for train and test
write.table(diabetes_train, sep = ',', file = './datasets/Diabetes_train.csv', row.names = F)
write.table(diabetes_test, sep = ',', file = './datasets/Diabetes_test.csv', row.names = F)
# Loading neural net packages
# install.packages(c('nnet', 'neuralnet', 'pnn', 'RSNNS', 'NeuralNetTools'))
library(nnet)
library(neuralnet)
library(pnn)
library(RSNNS)
library(NeuralNetTools)
# Building the neural net model
diabetes_nnet = nnet(positive.test ~ ., data = diabetes_train,
size = 8, maxit = 10000, decay = 0.0001)
summary(diabetes_nnet)
# Prediction and confusion matrix
test_pred = predict(diabetes_nnet, newdata = diabetes_test, type = 'class')
library(caret)
cm_nn = confusionMatrix(table(true = diabetes_test$positive.test, predicted = test_pred))
cm_nn
diabetes_pnet = learn(set = diabetes_train, category.column = length(diabetes_train))
diabetes_pnet = smooth(diabetes_pnet, sigma = .5)
diabetes_test$predict = -1
diabetes_testsub = diabetes_test[, 1:8]
vec = as.matrix(diabetes_testsub[7, ])
res = guess(diabetes_gnet, vec)
res = guess(diabetes_pnet, vec)
vec = as.matrix(diabetes_testsub[1, ])
res = guess(diabetes_pnet, vec)
res$category
res = res$category
vec = as.matrix(diabetes_testsub[7, ])
res = guess(diabetes_pnet, vec)
res = res$category
vec = as.matrix(diabetes_testsub[7, ])
res = guess(diabetes_pnet, vec)
res = ifelse(is.na(res$category), NA, res$category)
res = ifelse(is.na(res), NA, res$category)
vec = as.matrix(diabetes_testsub[6, ])
res = guess(diabetes_pnet, vec)
res = ifelse(is.na(res), NA, res$category)
res = guess(diabetes_pnet, vec)
res = ifelse(is.na(res), NA, res$category)
res
res = guess(diabetes_pnet, vec)
res$category
is.na(res)
vec = as.matrix(diabetes_testsub[6, ])
res = guess(diabetes_pnet, vec)
res = ifelse(anyNA(res), NA, res$category)
for(i in 1:nrow(diabetes_testsub)) {
vec = as.matrix(diabetes_testsub[i, ])
res = guess(diabetes_pnet, vec)
res = ifelse(anyNA(res), NA, res$category)
if(anyNA(res)) {
cat("Entry ",i," Generated NaN result!\n")
} else{
diabetes_test$predict[i] = res
}
}
diabetes_pnet = smooth(diabetes_pnet, sigma = 1)
for(i in 1:nrow(diabetes_testsub)) {
vec = as.matrix(diabetes_testsub[i, ])
res = guess(diabetes_pnet, vec)
res = ifelse(anyNA(res), NA, res$category)
if(anyNA(res)) {
cat("Entry ",i," Generated NaN result!\n")
} else{
diabetes_test$predict[i] = res
}
}
for(i in 1:nrow(diabetes_testsub)) {
vec = as.matrix(diabetes_testsub[i, ])
res = guess(diabetes_pnet, vec)
res = ifelse(anyNA(res), NA, res$category)
if(anyNA(res)) {
cat("Entry ",i," Generated NaN result!\n")
} else{
diabetes_test$predict[i] = res
}
}
diabetes_pnet = smooth(diabetes_pnet, sigma = 1.4)
for(i in 1:nrow(diabetes_testsub)) {
vec = as.matrix(diabetes_testsub[i, ])
res = guess(diabetes_pnet, vec)
res = ifelse(anyNA(res), NA, res$category)
if(anyNA(res)) {
cat("Entry ",i," Generated NaN result!\n")
